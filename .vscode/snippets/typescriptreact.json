{
  "React Functional Component": {
    "prefix": "rfc",
    "body": [
      "import React from 'react'",
      "",
      "interface ${1:ComponentName}Props {",
      "  $2",
      "}",
      "",
      "export function ${1:ComponentName}({ $3 }: ${1:ComponentName}Props) {",
      "  return (",
      "    <div>",
      "      $4",
      "    </div>",
      "  )",
      "}"
    ],
    "description": "Create a React functional component with TypeScript"
  },
  "React Functional Component with Children": {
    "prefix": "rfcc",
    "body": [
      "import React from 'react'",
      "",
      "interface ${1:ComponentName}Props {",
      "  children: React.ReactNode",
      "  $2",
      "}",
      "",
      "export function ${1:ComponentName}({ children, $3 }: ${1:ComponentName}Props) {",
      "  return (",
      "    <div>",
      "      {children}",
      "    </div>",
      "  )",
      "}"
    ],
    "description": "Create a React functional component with children prop"
  },
  "React Component with useState": {
    "prefix": "ruse",
    "body": [
      "import React, { useState } from 'react'",
      "",
      "interface ${1:ComponentName}Props {",
      "  $2",
      "}",
      "",
      "export function ${1:ComponentName}({ $3 }: ${1:ComponentName}Props) {",
      "  const [${4:state}, set${4/(.*)/${4:/capitalize}/}] = useState($5)",
      "",
      "  return (",
      "    <div>",
      "      $6",
      "    </div>",
      "  )",
      "}"
    ],
    "description": "Create a React component with useState hook"
  },
  "React Component with useEffect": {
    "prefix": "ruseEffect",
    "body": [
      "import React, { useEffect } from 'react'",
      "",
      "interface ${1:ComponentName}Props {",
      "  $2",
      "}",
      "",
      "export function ${1:ComponentName}({ $3 }: ${1:ComponentName}Props) {",
      "  useEffect(() => {",
      "    $4",
      "  }, [$5])",
      "",
      "  return (",
      "    <div>",
      "      $6",
      "    </div>",
      "  )",
      "}"
    ],
    "description": "Create a React component with useEffect hook"
  },
  "React Component with both useState and useEffect": {
    "prefix": "ruseBoth",
    "body": [
      "import React, { useState, useEffect } from 'react'",
      "",
      "interface ${1:ComponentName}Props {",
      "  $2",
      "}",
      "",
      "export function ${1:ComponentName}({ $3 }: ${1:ComponentName}Props) {",
      "  const [${4:state}, set${4/(.*)/${4:/capitalize}/}] = useState($5)",
      "",
      "  useEffect(() => {",
      "    $6",
      "  }, [$7])",
      "",
      "  return (",
      "    <div>",
      "      $8",
      "    </div>",
      "  )",
      "}"
    ],
    "description": "Create a React component with both useState and useEffect hooks"
  },
  "React Context Provider": {
    "prefix": "rcontext",
    "body": [
      "import React, { createContext, useContext, ReactNode } from 'react'",
      "",
      "interface ${1:ContextName}ContextType {",
      "  $2",
      "}",
      "",
      "const ${1:ContextName}Context = createContext<${1:ContextName}ContextType | undefined>(undefined)",
      "",
      "interface ${1:ContextName}ProviderProps {",
      "  children: ReactNode",
      "  $3",
      "}",
      "",
      "export function ${1:ContextName}Provider({ children, $4 }: ${1:ContextName}ProviderProps) {",
      "  $5",
      "",
      "  const value: ${1:ContextName}ContextType = {",
      "    $6",
      "  }",
      "",
      "  return (",
      "    <${1:ContextName}Context.Provider value={value}>",
      "      {children}",
      "    </${1:ContextName}Context.Provider>",
      "  )",
      "}",
      "",
      "export function use${1:ContextName}() {",
      "  const context = useContext(${1:ContextName}Context)",
      "  if (context === undefined) {",
      "    throw new Error(`use${1:ContextName} must be used within a ${1:ContextName}Provider`)",
      "  }",
      "  return context",
      "}"
    ],
    "description": "Create a React context with provider and hook"
  },
  "React Event Handler": {
    "prefix": "rhandler",
    "body": [
      "const handle${1:EventName} = (${2:event}: React.${3:MouseEvent}<HTML${4:Button}Element>) => {",
      "  $5",
      "}"
    ],
    "description": "Create a React event handler"
  },
  "React Form with useState": {
    "prefix": "rform",
    "body": [
      "import React, { useState } from 'react'",
      "",
      "interface ${1:FormName}Props {",
      "  $2",
      "}",
      "",
      "export function ${1:FormName}({ $3 }: ${1:FormName}Props) {",
      "  const [formData, setFormData] = useState({",
      "    $4",
      "  })",
      "",
      "  const handleSubmit = (e: React.FormEvent) => {",
      "    e.preventDefault()",
      "    $5",
      "  }",
      "",
      "  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {",
      "    const { name, value } = e.target",
      "    setFormData(prev => ({",
      "      ...prev,",
      "      [name]: value",
      "    }))",
      "  }",
      "",
      "  return (",
      "    <form onSubmit={handleSubmit}>",
      "      $6",
      "    </form>",
      "  )",
      "}"
    ],
    "description": "Create a React form with useState"
  }
}
